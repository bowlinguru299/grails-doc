如今的Java Web开发对于需求来说已经变得过于复杂。当今众多Java领域的Web开发框架不仅使用复杂，而且并没有很好的遵循Don't Repeat Yourself（DRY）原则。

像Rails，Django和TurboGears这样的动态框架在Web开发领域开辟了一条新的道路，Grails基于这些概念之上，采用动态方法减小了Java平台上进行Web开发的复杂度，不过与那些框架不同的是，Grails是构建在Spring和Hibernate等Java已有的技术之上的。

Grails是一个full-stack框架，它借助于核心技术与相关的插件（plug-in）来解决Web开发中方方面面的问题，其中包括：

*易于使用的基于[Hibernate|http://www.hibernate.org]的对象-关系映射(ORM)层
*称为Groovy Server Pages (GSP)的表现层技术
*基于"Spring":http://www.springframework.org MVC的控制器层
*构建于"Gant":http://groovy.codehaus.org/Gant 上的命令行脚本运行环境
*内置"Tomcat":http://tomcat.apache.org服务器，不用重新启动服务器就可以进行重新加载
*利用内置的Spring 容器实现依赖注入
*基于Spring的MessageSource核心概念，提供了对国际化（i18n）的支持
*基于Spring事务抽象概念，实现事务服务层

借助于功能强大的Groovy动态语言和领域特定语言（Domain Specific Language，DSL），以上那些特性变得非常易用。

这篇文档会向你介绍如何使用Grails框架来搭建Web应用程序。

{hidden}

Java web development as it stands today is dramatically more complicated than it needs to be. Most modern web frameworks in the Java space are over complicated and don't embrace the Don't Repeat Yourself (DRY) principles.

Dynamic frameworks like Rails, Django and TurboGears helped pave the way to a more modern way of thinking about web applications. Grails builds on these concepts and dramatically reduces the complexity of building web applications on the Java platform. What makes it different, however, is that it does so by building on already established Java technologies like Spring and Hibernate.

Grails is a full stack framework and attempts to solve as many pieces of the web development puzzle through the core technology and its associated plugins. Included out the box are things like:

* An easy to use Object Relational Mapping (ORM) layer built on [Hibernate|http://www.hibernate.org]
* An expressive view technology called Groovy Server Pages (GSP)
* A controller layer built on "Spring":http://www.springframework.org MVC
* A command line scripting environment built on the Groovy-powered "Gant":http://groovy.codehaus.org/Gant
* An embedded "Tomcat":http://tomcat.apache.org container which is configured for on the fly reloading
* Dependency injection with the inbuilt Spring container
* Support for internationalization (i18n) built on Spring's core MessageSource concept
* A transactional service layer built on Spring's transaction abstraction

All of these are made easy to use through the power of the "Groovy":http://groovy.codehaus.org language and the extensive use of Domain Specific Languages​​ (DSLs)

This documentation will take you through getting started with Grails and building web applications with the Grails framework.

{hidden}