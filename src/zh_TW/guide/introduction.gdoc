如今的Java Web開發對於需求來說已經變得過於復雜。當今眾多Java領域的Web開發框架不僅使用複雜，而且並沒有很好的遵循Don't Repeat Yourself（DRY）原則。 

像Rails，Django和TurboGears這樣的動態框架在Web開發領域開闢了一條新的道路，Grails基於這些概念之上，採用動態方法減小了Java平台上進行Web開發的複雜度，不過與那些框架不同的是，Grails是構建在Spring和Hibernate等Java已有的技術之上的。 

Grails是一個full-stack框架，它藉助於核心技術與相關的插件（plug-in）來解決Web開發中方方面面的問題，其中包括： 

*易於使用的基於[Hibernate|http://www.hibernate.org]的對象-關係映射(ORM)層
*稱為Groovy Server Pages (GSP)的表現層技術
*基於"Spring":http://www.springframework.org MVC的控制器層
*構建於"Gant":http://groovy.codehaus.org/Gant 上的命令行腳本運行環境
*內置"Tomcat":http://tomcat.apache.org服務器，不用重新啟動服務器就可以進行重新加載
*利用內置的Spring 容器實現依賴注入
*基於Spring的MessageSource核心概念，提供了對國際化（i18n）的支持
*基於Spring事務抽象概念，實現事務服務層

借助於功能強大的Groovy動態語言和領域特定語言（Domain Specific Language，DSL），以上那些特性變得非常易用。

這篇文檔會向你介紹如何使用Grails框架來搭建Web應用程序。

{hidden}
Java web development as it stands today is dramatically more complicated than it needs to be. Most modern web frameworks in the Java space are over complicated and don't embrace the Don't Repeat Yourself (DRY) principles.

Dynamic frameworks like Rails, Django and TurboGears helped pave the way to a more modern way of thinking about web applications. Grails builds on these concepts and dramatically reduces the complexity of building web applications on the Java platform. What makes it different, however, is that it does so by building on already established Java technologies like Spring and Hibernate.

Grails is a full stack framework and attempts to solve as many pieces of the web development puzzle through the core technology and its associated plugins. Included out the box are things like:

* An easy to use Object Relational Mapping (ORM) layer built on [Hibernate|http://www.hibernate.org]
* An expressive view technology called Groovy Server Pages (GSP)
* A controller layer built on "Spring":http://www.springframework.org MVC
* A command line scripting environment built on the Groovy-powered "Gant":http://groovy.codehaus.org/Gant
* An embedded "Tomcat":http://tomcat.apache.org container which is configured for on the fly reloading
* Dependency injection with the inbuilt Spring container
* Support for internationalization (i18n) built on Spring's core MessageSource concept
* A transactional service layer built on Spring's transaction abstraction

All of these are made easy to use through the power of the "Groovy":http://groovy.codehaus.org language and the extensive use of Domain Specific Languages (DSLs)

This documentation will take you through getting started with Grails and building web applications with the Grails framework.
{hidden}