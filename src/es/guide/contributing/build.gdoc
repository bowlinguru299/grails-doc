{hidden}
In order to build Grails from source and run the tests, you need to first have the following pre-requisites.
* JDK (1.6+)
* Git client
{hidden}

Con el fin de construir Grails desde el código fuente y ejecutar las pruebas, es necesario primero tener los siguientes requisitos previos.
* JDK (1.6+)
* Git client

{hidden}
Once you have all the pre-requisite packages installed, the next step is to download the Grails source code. The source code is hosted at [GitHub|http://github.com] in several different git repositories owned by the ["grails" GitHub user|http://github.com/grails].
{hidden}

Una vez que tenga todos los paquetes requeridos instalados, el siguiente paso es descargar el código fuente de Grails. El código fuente está alojado en [GitHub | http://github.com] en varios repositorios git diferentes propiedad del [usuario Grails de GitHub | http://github.com/grails].

{hidden}
To download the source using git, use the "git clone" command followed by the public URL of the repository you want to clone (download). For example, to clone the "grails-core" repository, run the following:
{hidden}

Para descargar el código fuente con git, utilice el comando "git clone" seguida por la dirección URL pública del repositorio que desea clonar (descargar). Por ejemplo, para clonar el repositorio "grails-core", ejecute lo siguiente:

{code}
git clone http://github.com/grails/grails-core.git
{code}

{hidden}
The above will create a "grails-core" directory in your current working directory populated with the project source and the git repository.
{hidden}

Lo anterior crea un directorio "grails-core" en su directorio de trabajo actual con el código del proyecto y el repositorio de git.

{hidden}
h3. Create the required jars
{hidden}

h3. Crear los jars necesarios

{code}
./gradlew libs
{code}

{hidden}
This will create everything you need to run Grails. This target also skips running the extensive collection of Grails test classes (Grails' 1000+ tests can bring a single core processor to a grinding halt for some time).
{hidden}

Esto va a crear todo lo necesario para ejecutar Grails. Este target también evita ejecutar la amplia colección de prueba Grails (las más de 1000 pruebas de Grails pueden provocar que un procesador se colapse por algún tiempo).

{hidden}
Once the jars have been built, simply set GRAILS_HOME to the checkout directory and add the "bin" directory to your path.
{hidden}

Una vez que los jars se han construido, basta con asignar a GRAILS_HOME en el directorio de salida y añadir el directorio "bin" a su ruta.

{hidden}
h3. Run the test suite

All you have to do to run the full suite of tests is:
{hidden}

h3. Ejecutar las pruebas

Todo lo que tienes que hacer para ejecutar el conjunto completo de pruebas es lo siguiente:

{code}
./gradlew test
{code}

{hidden}
These will take a while (15-30 mins), so consider running individual tests using the command line. For example, to run the tests in src/test/org/codehaus/groovy/grails/orm/hibernate/MappingDslTests.groovy, run the following command:
{hidden}

Esto llevará un tiempo (15-30 minutos), así que considere la realización de pruebas individuales desde la línea de comandos. Por ejemplo, para ejecutar las pruebas en src/test/org/codehaus/groovy/grails/orm/hibernate/MappingDslTests.groovy, ejecute el siguiente comando:

{code}
./gradlew -Dtest.single=MappingDslTest grails-test-suite-persistence:test
{code}

{hidden}
You need to give it the specific test suite that the test exists in, just using the "test" target won't work.
{hidden}

Tienes que proporcionarle el conjunto de pruebas específicas en el que la prueba existe, usar solamente el target "test" no va a funcionar.

{hidden}
h3. Developing in IntelliJ IDEA

You need to run the following gradle task:
{hidden}

h3. Desarrollo con IntelliJ IDEA

Tiene que ejecutar la siguiente tarea gradle:

{code}
./gradlew idea
{code}

{hidden}
Then open the project file which is generated in IDEA. Simple!
{hidden}

A continuación, abra el archivo de proyecto que se genera en IDEA. ¡Sencillo!

{hidden}
h3. Developing in STS / Eclipse

You need to run the following gradle task:
{hidden}

h3. Desarrollo con STS / Eclipse

Tiene que ejecutar la siguiente tarea gradle:

{code}
./gradlew cleanEclipse eclipse
{code}

{hidden}
Before importing projects to STS do the following action:
* Edit grails-scripts/.classpath and remove the line "<classpathentry kind="src" path="../scripts"/>".
{hidden}

Antes de importar proyectos de STS haga lo siguiente:
* Editar grails-scripts/.classpath y eliminar la línea "<classpathentry kind="src" path="../scripts"/>".

{hidden}
Use "Import->General->Existing Projects into Workspace" to import all projects to STS. There will be a few build errors. To fix them do the following actions:
* Add "~/.gradle/cache/com.springsource.springloaded/springloaded-core/jars/springloaded-core-XXXX.jar" to grails-core's classpath.
* Remove "src/test/groovy" from grails-plugin-testing's source path GRECLIPSE-1067
* Add "~/.gradle/cache/javax.servlet.jsp/jsp-api/jars/jsp-api-2.1.jar" to the classpath of grails-web
* Fix the source path of grails-scripts. Add linked source folder linking to "../scripts". If you get build errors in grails-scripts, do "../gradlew cleanEclipse eclipse" in that directory and edit the .classpath file again (remove the line "<classpathentry kind="src" path="../scripts"/>"). Remove possible empty "scripts" directory under grails-scripts if you are not able to add the linked folder.
* Do a clean build for the whole workspace.
* To use Eclipse GIT scm team provider: Select all projects (except "Servers") in the navigation and right click -> Team -> Share project (not "Share projects"). Choose "Git". Then check "Use or create repository in parent folder of project" and click "Finish".
* Get the recommended code style settings from the [mailing list thread|http://grails.1312388.n4.nabble.com/Grails-development-code-style-IDE-formatting-settings-tp3854216p3854216.html] (final style not decided yet, currently [profile.xml|http://grails.1312388.n4.nabble.com/attachment/3854262/0/profile.xml]). Import the code style xml file to STS in Window->Preferences->Java->Code Style->Formatter->Import . Grails code uses spaces instead of tabs for indenting.
{hidden}

Use "Import-> General-> Proyectos existentes en área de trabajo" para importar todos los proyectos desde el STS. Habrá algunos errores de compilación. Para solucionar este problema haga lo siguiente:
* Añadir "~/.gradle/cache/com.springsource.springloaded/springloaded-core/jars/springloaded-core-XXXX.jar" al classpath de grails.
* Eliminar "src/test/groovy" de la ruta de origen grails-plugin-testing de GRECLIPSE-1067
* Añadir "~/.gradle/cache/javax.servlet.jsp/jsp-api/jars/jsp-api-2.1.jar" a la ruta de clase de grails-web.
* Fijar la ruta de origen de grails-scripts. Añadir la carpeta vinculada fuente de enlaces a "../scripts". Si recibe errores de compilación en grails-scripts, hacer "../gradlew cleanEclipse eclipse" en ese directorio y editar el archivo .classpath de nuevo (quitar la línea "<classpathentry kind="src" path="../scripts"/>"). Eliminar los posibles directorios vacíos "scripts" en grails-scripts, si no es capaz de agregar la carpeta vinculada.
* Haga una construcción limpia para el espacio de trabajo común.
* Para utilizar clipse GIT scm team provider: Seleccione todos los proyectos (con excepción de "Servers") en la navegación y haga botón derecho -> Equipo -> Compartir proyecto (no "Compartir proyectos"). Seleccione la opción "Git". A continuación, la opción "Usar o crear repositorio en la carpeta principal del proyecto" y haga clic en "Finalizar".
* Obtenga el formato de estilo de código de [la lista de correo|http://grails.1312388.n4.nabble.com/Grails-development-code-style-IDE-formatting-settings-tp3854216p3854216.html] (estilo final aún no decidido, actualmente es [profile.xml|http://grails.1312388.n4.nabble.com/attachment/3854262/0/profile.xml]). Importar el xml con el estilo de código para STS en Ventana-> Preferencias-> Java-> Code Style-> Formateador-> Importar. El código Grails utiliza los espacios en lugar de tabuladores para sangrar.

{hidden}
h3. Debug

To debug Grails run the Grails application using:
{hidden}

h3. Depurar

Para depurar Grails ejecutar la aplicación Grails con:

{code}
grails-debug <command>
{code}

{hidden}
and then connect to it remotely via the IDE. There should be an option for "remote debugging". Unless you modify the "grails-debug" script, you should connect to port 5005.
{hidden}

y conectalo de forma remota a través del IDE. Debe haber una opción para "depuración remota". A menos que modifique el script "grails-debug", debe conectarse al puerto 5005.

{hidden}
If you need to debug stuff that happens during application start-up, then you should modify the "grails-debug" script and change the "suspend" option from 'n' to 'y'.
{hidden}

Si se necesita depurar cosas que pasan durante la puesta en marcha de la aplicación, entonces debe modificar el script "grails-debug" y cambiar la opción "suspender" de 'n' a 'y'.

{hidden}
You can read more about the JPDA Connection settings here: [http://java.sun.com/j2se/1.5.0/docs/guide/jpda/conninv.html#Invocation|http://java.sun.com/j2se/1.5.0/docs/guide/jpda/conninv.html#Invocation]
{hidden}

Puede leer más acerca de los ajustes de conexión JPDA aquí: [http://java.sun.com/j2se/1.5.0/docs/guide/jpda/conninv.html#Invocation|http://java.sun.com/j2se/1.5.0/docs/guide/jpda/conninv.html#Invocation]

{hidden}
It's also possible to get Eclipse to wait for incoming debugger connections and instead of using "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005" you could use this "-Xrunjdwp:transport=dt_socket,server=n,address=8000" (which assumes the Eclipse default port for remote java applications) Inside eclipse you create a new "Remote Java Application" launch configuration and change the connection type to "Standard (Socket Listen)" and click debug. This allows you to start a debugger session in eclipse and just leave it running and you're free to debug anything without having to keep remembering to relaunch a "Socket Attach" launch configuration. You might find it handy to have 2 scripts, one called "grails-debug", and another called "grails-debug-attach"
{hidden}

También es posible hacer que Eclipse espere a las conexiones de entrada del depurador si en lugar de usar "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005" usa este "-Xrunjdwp:transport=dt_socket,server=n,address=8000" (que supone el puerto por defecto de Eclipse para aplicaciones remotas de Java). Dentro de Eclipse cree una nueva "Aplicación remota de Java", configurando el tipo de conexión a "Standard (Socket Listen)" y haga clic en depuración. Esto le permite iniciar una sesión de depuración en eclipse y así puedes depurar cualquier cosa sin tener que seguir recordando que debes relanzar un "Socket Attach". Puede que le resulte útil tener dos scripts, uno llamado "grails-debug", y otro llamado "grails-debug-attach".